1. Zadeklarowaæ zmienn¹ z_nazwisko o d³ max 10 znaków które w sekcji wykonawczej przypisac wartosc np. "Nowak-Konopacka" i obsluzyc wyj¹tek który sie pojawi za pomoc¹ komuniaktu "Za d³ugie nazwisko".

DECLARE
  z_nazwisko varchar2(10);
BEGIN
  z_nazwisko:='Nowak-Konopacka';
EXCEPTION
  WHEN VALUE_ERROR THEN
  DBMS_OUTPUT.PUT_LINE('Error: Za dlugie nazwisko');
END;
/
-------------------------------------------------------------------------------------------------------------------

2. Za pomoc¹ KURSORA NIEJAWNEGO wyœwietliæ dane tych osób, których id jest >= od pewnej liczby naturalnej zadeklarowanej w sekcji deklaracji. W bloku anonimowym z tym kursorem obs³uzyæ wszystkie wyj¹tki, które mog¹ siê pojawiæ za pomoc¹ odpowiednich komentarzy.

DECLARE 
z_id osoby.id_os%TYPE:=40;
z_imie osoby.imie1%TYPE;
z_nazwisko osoby.nazwisko%TYPE;
BEGIN
    SELECT  id_os, imie1, nazwisko
    INTO z_id, z_imie, z_nazwisko
    FROM osoby
    WHERE id_os>=z_id;

EXCEPTION
  WHEN TOO_MANY_ROWS THEN
  DBMS_OUTPUT.PUT_LINE('za duzo danych');
  WHEN NO_DATA_FOUND THEN
  --DBMS_OUTPUT.PUT_LINE('nie znaleziono danych');
  RAISE_APPLICATION_ERROR(-20000,'nie znaleziono danych');
END;
/
  

Zanu¿yæ w bloku anonimowy z poprzedniego zadania w nadbloku anonimowym z obsluga tych wyjaktow. Wy³¹czaæ/usuwac obs³ugê wyj¹tków w nadbloku, podbloku, (rise i dbms tez pozamieniac. 

DECLARE 
z_id osoby.id_os%TYPE:=6;
z_imie osoby.imie1%TYPE;
z_nazwisko osoby.nazwisko%TYPE;
BEGIN
  SELECT nazwisko, imie1
  INTO z_nazwisko, z_imie
  FROM osoby
  WHERE id_os=1;
  DBMS_OUTPUT.PUT_LINE('Osoba ma id_os=1');
  
  BEGIN
    SELECT  id_os, imie1, nazwisko
    INTO z_id, z_imie, z_nazwisko
    FROM osoby
    WHERE id_os>=z_id;

    EXCEPTION
      WHEN TOO_MANY_ROWS THEN
      DBMS_OUTPUT.PUT_LINE('Wiecej niz 1 rekord');
      WHEN NO_DATA_FOUND THEN
      --DBMS_OUTPUT.PUT_LINE('nie znaleziono danych');
      RAISE_APPLICATION_ERROR(-20000,'nie ma takich id');
  END;
EXCEPTION
  WHEN TOO_MANY_ROWS THEN
  --DBMS_OUTPUT.PUT_LINE('zbyt wiele rekordow');
  RAISE_APPLICATION_ERROR(-20000,'zbyt wiele rekordow');
  WHEN NO_DATA_FOUND THEN
  --DBMS_OUTPUT.PUT_LINE('nie znaleziono danych');
  RAISE_APPLICATION_ERROR(-20000,'brak danych');
  
END;
/
-------------------------------------------------------------------------------------------------------------------
3.Istnieje potrzeba ograniczenia p³ac na wydzialach. Nalezy maksymalna aktualnie wyplacana pensjê ograniczyc do 4000. Jesli aktualnie najwyzsza pensja przekracza nalezy napisac komunikat.


DECLARE
z_maxPensja zatrudnienia.pensja%TYPE;
z_limit NUMBER:=4000;
w_zbytWysokaPensja EXCEPTION;
BEGIN
  SELECT MAX(pensja)
  INTO z_maxPensja
  FROM zatrudnienia;
  DBMS_OUTPUT.PUT_LINE('Pensja max: '||z_maxPensja);

  IF z_maxPensja>z_limit THEN
  RAISE w_zbytWysokaPensja;
  END IF;

EXCEPTION
  WHEN w_zbytWysokaPensja THEN
  DBMS_OUTPUT.PUT_LINE('Przekroczono limit');

END;
/

-------------------------------------------------------------------------------------------------------------------

4. Do bazy kadry wprowadzono 2 rekordy (musimy je wprowadzic) do tabeli 
Osoby: 31 Karp Janusz 15/03/1971 M
Zatrudnienia: 100 31 21/03/1970 21/01/1969 2 3000 1
Nalezy zaprojektowaæ obs³ugê wyj¹tków które dla dowolnej osoby obs³u¿¹ nastêpuj¹ce wyj¹tki:
a)'Data urodzenia jest póŸniejsza ni¿ data zatrudnienia!'
b)'Data zatrudnienia jest póŸniejsza ni¿ data zwolnienia'
c)'Data urodzenia jest póŸniejsza ni¿ data zatrudnienia i data zatrudnienia jest póŸniejsza ni¿ data zwolnienia'


--INSERT INTO osoby VALUES(31,'Karp','Janusz',null,TO_DATE('15/03/1971','dd/mm/yyyy'),'M');
--INSERT INTO zatrudnienia VALUES(100,31,TO_DATE('21/03/1970','dd/mm/yyyy'),TO_DATE('21/01/1969','dd/mm/yyyy'),2,3000,1);

DECLARE
  z_id_os osoby.id_os%TYPE:=31;
  z_d_ur osoby.d_ur%TYPE;
  z_d_zat zatrudnienia.od%TYPE;
  z_d_zw zatrudnienia.do%TYPE;
  
  w_urZat EXCEPTION;
  w_zatZw EXCEPTION;
  w_urZaZw EXCEPTION;
BEGIN
  SELECT o.d_ur, z.od, z.do
  INTO z_d_ur, z_d_zat, z_d_zw
  FROM osoby o JOIN zatrudnienia z ON o.id_os=z.id_os
  WHERE o.id_os=z_id_os;
  
  IF z_d_ur>z_d_zat AND z_d_zat>z_d_zw THEN
  RAISE w_urZaZw;
  END IF;
  IF z_d_ur>z_d_zat THEN
  RAISE w_urZat;
  END IF;
  IF z_d_zat>z_d_zw THEN
  RAISE w_zatZw;
  END IF;
  
  
EXCEPTION
  WHEN w_urZat THEN
  DBMS_OUTPUT.PUT_LINE('Data urodzenia jest póŸniejsza ni¿ data zatrudnienia!');
  WHEN w_zatZw THEN
  DBMS_OUTPUT.PUT_LINE('Data zatrudnienia jest póŸniejsza ni¿ data zwolnienia!');
  WHEN w_urZaZw THEN
  DBMS_OUTPUT.PUT_LINE('Data urodzenia jest póŸniejsza ni¿ data zatrudnienia i data zatrudnienia jest póŸniejsza ni¿ data zwolnienia!');

END;
/

5. Wykonac obsluge wyjaktu za pomoca wyjatku others, przy pomocy SQLCODE i SQLRRM. Przy czym obsluga tego powinna polegac na zapisie kodu bledu i tekstu o bledzie do tabeli dziennik_bledow skladajacy sie z dwóch pól(utworzyc te tabelke) kod NUMBER i komunikat VARCGAR(200). Blok w ktorym ma byc zrealizowana ta obsluga wuyjatkow zawiera kursor niejawny ktory wybiera te osoby dla ktorych aktualzny staz pracy wynosi od 1 do 100 pelnych przepracowanych lat.
